{"version":3,"sources":["components/drag-and-drop/dragabble-item/dragabble-item.component.tsx","components/drag-and-drop/dragabble-column/dragabble-column.component.tsx","components/drag-and-drop/drag-and-drop.component.tsx","components/drag-and-drop/utils/reorder.ts","common/components/expansion-panel/expansion-panel.component.tsx","components/app/app.tsx","serviceWorker.ts","index.tsx"],"names":["DragableItem","React","memo","item","index","column","columns","isDragDisabled","itemDetails","getStyle","useCallback","provided","snapshot","style","draggableProps","getItemStyle","isDragging","isDropAnimating","transitionDuration","draggingSnapshot","id","children","console","error","draggableId","dragHandleProps","ref","innerRef","DragabbleColumn","droppableId","itemsMap","items","hide","droppableProps","map","ele","key","placeholder","columnIndex","cols","name","x","forEach","col","i","DragAndDrop","onColumnsUpdate","move","sourceColumn","destinationColumn","droppableSource","droppableDestination","sourceItemsClone","Array","from","destItemsClone","destColumnMax","max","length","splice","soureceRemoved","destinationRemoved","removed","result","onDragEnd","source","destination","sourceColumnIndex","destinationColumnIndex","reorderedList","list","startIndex","endIndex","reorder","columnsClone","moveResult","display","useStyles","makeStyles","createStyles","root","width","height","heading","fontSize","SimpleExpansionPanel","title","isExpanded","handleExpand","classes","onChange","event","flag","ExpansionPanel","expanded","ExpansionPanelSummary","expandIcon","aria-controls","Typography","className","ExpansionPanelDetails","COLUMNS","expand","padding","background","App","useState","setColumns","columnItems","useMemo","1","2","3","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.9dacb8ef.chunk.js","sourcesContent":["import React, { FC, useCallback } from 'react';\nimport { Draggable, DraggableStateSnapshot, DraggableProvided } from 'react-beautiful-dnd';\n\nimport { Column } from '../dragabble-column/dragabble-column.component';\n\nexport interface ItemDetails<T = {}> {\n  readonly index: number;\n  readonly item: Item<T>;\n  readonly column: Column<T>;\n  readonly columns: Column<T>[];\n  readonly draggingSnapshot: DraggableStateSnapshot;\n  readonly style?: any;\n}\n\nexport interface ItemMap<T = {}> {\n  children: (props: ItemDetails<T>) => string | JSX.Element | null;\n  getItemStyle?: (props: Required<ItemDetails<T>>) => object;\n}\n\nexport type BaseItem<T = {}> = {\n  id: number; // NOTE: id has to be unique across all dragging elements\n} & T\n\nexport type Item<T = {}> = BaseItem<T> & ItemMap<T>;\n\ninterface DragableItemProps {\n  item: Item;\n  index: number;\n  column: Column;\n  isDragDisabled?: boolean;\n  columns: Column[];\n}\n\nexport const DragableItem: FC<DragableItemProps> = React.memo(\n  ({ item, index, column, columns, isDragDisabled = false }) => {\n    const itemDetails = { index, item, column, columns };\n    \n    const getStyle = useCallback(\n      (provided: DraggableProvided, snapshot: DraggableStateSnapshot) => {\n        // more info on below structure \n        // https://github.com/atlassian/react-beautiful-dnd/issues/374#issuecomment-569817782\n        const style = provided.draggableProps.style;\n        // disabling the default animation.. as it looks wierd for swapping\n        // TODO: do custom animation for swapping \n        if (item.getItemStyle) {\n          // if callback exists pass the style to consumer, so they can update the style objects\n          if (!snapshot.isDragging) {\n            return item.getItemStyle({...itemDetails, style: {}, draggingSnapshot: snapshot});\n          }\n          if (!snapshot.isDropAnimating) {\n            return item.getItemStyle({...itemDetails, style, draggingSnapshot: snapshot});\n          }\n          return item.getItemStyle({\n            ...itemDetails, \n            style: {\n              ...style,\n              // cannot be 0, but make it super tiny\n              transitionDuration: `0.001s`,\n            }, \n            draggingSnapshot: snapshot\n          });\n        } else {\n          if (!snapshot.isDragging) {\n            return {};\n          }\n          if (!snapshot.isDropAnimating) {\n            return style;\n          }\n          return {\n            ...style,\n            // cannot be 0, but make it super tiny\n            transitionDuration: `0.001s`,\n          };\n        }\n      },\n      [itemDetails, item]\n    );\n\n    if (item.id && !item.children) {\n      // extra error message ids are not properly matched in item maps and column ids\n      console.error('Children missing for dragabble item with id:', item.id);\n    }\n  \n    return (\n      <Draggable \n        draggableId={`${item.id}`} \n        index={index} \n        isDragDisabled={isDragDisabled}\n      >\n        {(provided, snapshot) => (\n          <div\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n            ref={(ref) => provided.innerRef(ref)}\n            style={getStyle(provided, snapshot)}\n          >\n            {item.children({...itemDetails, draggingSnapshot: snapshot})}\n          </div>\n        )}\n      </Draggable>\n    );\n  }\n);\n","import React, { FC } from 'react';\nimport { Droppable } from 'react-beautiful-dnd';\n\nimport { DragableItem, BaseItem, ItemMap } from '../dragabble-item/dragabble-item.component';\n\nexport interface Column<T = {}>{\n  items: BaseItem<T>[];\n  name: string; \n  style?: object; // column style\n  max?: number; // max number of elements in a column\n  hide?: boolean;\n}\n\nexport interface DragabbleColumnProps {\n  itemsMap: {[key: number]: ItemMap };\n  droppableId: string;\n  column: Column;\n  columns: Column[];\n  isDragDisabled?: boolean;\n}\n\nexport const DragabbleColumn: FC<DragabbleColumnProps> = React.memo(\n  ({droppableId, column, columns, isDragDisabled, itemsMap}) => {\n    const { items, style, hide } = column;\n    \n    if (hide) {\n      return null;\n    }\n\n    return (\n      <Droppable droppableId={droppableId}>\n        {(provided) => (\n          <div ref={provided.innerRef} {...provided.droppableProps} style={{...style}}>\n            {\n              items && items.map((ele, index) => (\n                <DragableItem \n                  item={{...ele, ...itemsMap[ele.id]}} \n                  index={index} \n                  key={`${ele.id} ${index}`} \n                  column={column} \n                  columns={columns}\n                  isDragDisabled={isDragDisabled}\n                />\n              ))\n            }\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    );\n  }\n);\n","import React, { FC, useCallback } from 'react';\nimport { DragDropContext, DropResult, DraggableLocation } from 'react-beautiful-dnd';\n\nimport { DragabbleColumn, Column } from './dragabble-column/dragabble-column.component';\nimport { ItemMap } from './dragabble-item/dragabble-item.component';\n\nimport { reorder } from './utils/reorder';\n\n\nconst columnIndex = (cols: Column[], name: string) => {\n  let x = -1;\n  cols.forEach((col, i) => {\n    if (col.name === name) {\n      x = i;\n    }\n  })\n  return x;\n}\n\ninterface DragAndDropProps {\n  columns: Column[];\n  itemsMap: {[key: number]: ItemMap};\n  onColumnsUpdate: (cols: Column[], dropResult?: DropResult) => void;\n  isDragDisabled?: boolean;\n}\n\nexport const DragAndDrop: FC<DragAndDropProps> = React.memo(\n  ({columns, onColumnsUpdate, isDragDisabled, itemsMap}) => {\n    /**\n     * Moves an item from one list to another list.\n     */\n    const move = useCallback(\n      (sourceColumn: Column, destinationColumn: Column, droppableSource: DraggableLocation, droppableDestination: DraggableLocation) => {\n        const sourceItemsClone = Array.from(sourceColumn.items);\n        const destItemsClone = Array.from(destinationColumn.items);\n  \n        // if destination reached its max, items should be swapped\n        const destColumnMax = destinationColumn.max;\n        if (destColumnMax && destItemsClone.length >= destColumnMax) {\n          // do swapping\n          // droppable index should be less than column max\n          if(droppableDestination.index < destColumnMax) {\n            // removing elements at their indexes\n            const [soureceRemoved] = sourceItemsClone.splice(droppableSource.index, 1);\n            const [destinationRemoved] = destItemsClone.splice(droppableDestination.index, 1);\n            // adding source removed to destinattion,,, and desitnation removed to source\n            destItemsClone.splice(droppableDestination.index, 0, soureceRemoved);\n            sourceItemsClone.splice(droppableSource.index, 0, destinationRemoved);\n          }\n        } else {\n          // remmove item from source\n          const [removed] = sourceItemsClone.splice(droppableSource.index, 1);\n          // add item to destination\n          destItemsClone.splice(droppableDestination.index, 0, removed);\n        }\n  \n        const result: any = {};\n        result[droppableSource.droppableId] = sourceItemsClone;\n        result[droppableDestination.droppableId] = destItemsClone;\n      \n        return result;\n      },\n      []\n    );\n  \n    const onDragEnd = useCallback(\n      (result: DropResult) => {\n        const { source, destination } = result;\n    \n        // dropped outside the list\n        if (!destination) {\n          return;\n        }\n\n        // position at which the source name exists in array\n        const sourceColumnIndex = columnIndex(columns, source.droppableId);\n        // position at which the source name exists in array\n        const destinationColumnIndex = columnIndex(columns, destination.droppableId);\n    \n        // if within same column\n        if (source.droppableId === destination.droppableId) {\n          // reorder them\n          const reorderedList = reorder(\n            // @ts-ignore. index signature for columns\n            columns[sourceColumnIndex].items,\n            source.index,\n            destination.index\n          );\n\n          const columnsClone = Array.from(columns);\n          // @ts-ignore. index signature for columns\n          columnsClone[sourceColumnIndex].items = reorderedList;\n    \n          // update source column list state\n          onColumnsUpdate(columnsClone, result);\n        } else {\n          // get the updated source and destination lists\n          const moveResult = move(\n            // @ts-ignore. index signature for columns\n            columns[sourceColumnIndex],\n            // @ts-ignore. index signature for columns\n            columns[destinationColumnIndex],\n            source,\n            destination\n          );\n\n          const columnsClone = Array.from(columns);\n          // @ts-ignore. index signature for columns\n          columnsClone[sourceColumnIndex].items = moveResult[source.droppableId];\n          // @ts-ignore. index signature for columns\n          columnsClone[destinationColumnIndex].items = moveResult[destination.droppableId];\n    \n          // update source column list state\n          onColumnsUpdate(columnsClone, result);\n        }\n      },\n      [columns, onColumnsUpdate, move]\n    );\n  \n    return (\n      <div style={{display: 'flex'}}>\n        <DragDropContext onDragEnd={onDragEnd}>\n          {\n            (columns as Column[]).map((col) => (\n              <DragabbleColumn\n                key={col.name} \n                droppableId={col.name}\n                itemsMap={itemsMap}\n                column={col}\n                columns={columns as Column[]}\n                isDragDisabled={isDragDisabled}\n              />\n            ))\n          }\n        </DragDropContext>\n      </div>\n    );\n  }\n);\n","export const reorder = <T extends {}>(list: T[], startIndex: number, endIndex: number) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};","import React, { FC, useCallback } from 'react';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport { ExpansionPanel, ExpansionPanelSummary, ExpansionPanelDetails, Typography } from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      width: '100%',\n      height: '100%'\n    },\n    heading: {\n      fontSize: 14\n    },\n  }),\n);\n\ninterface SimpleExpansionPanelProps {\n  title: string;\n  isExpanded: boolean;\n  style?: object;\n  handleExpand: (flag: boolean) => void;\n}\n\nexport const SimpleExpansionPanel: FC<SimpleExpansionPanelProps> = ({title, isExpanded, style, handleExpand }) => {\n  const classes = useStyles();\n\n  const onChange = useCallback(\n    (event: React.ChangeEvent<{}>, flag: boolean) => {\n      handleExpand(flag);\n    },\n    [handleExpand]\n  );\n\n  return (\n    <ExpansionPanel expanded={isExpanded} onChange={onChange}>\n      <ExpansionPanelSummary\n        expandIcon={<ExpandMoreIcon />}\n        aria-controls=\"panel1a-content\"\n        id=\"panel1a-header\"\n      >\n        <Typography className={classes.heading}>Panel {title}</Typography>\n      </ExpansionPanelSummary>\n      <ExpansionPanelDetails style={style}>\n        <Typography>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex,\n          sit amet blandit leo lobortis eget.\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex,\n          sit amet blandit leo lobortis eget.\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex,\n          sit amet blandit leo lobortis eget.\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex,\n          sit amet blandit leo lobortis eget.\n        </Typography>\n      </ExpansionPanelDetails>\n    </ExpansionPanel>\n  );\n}\n","import React, { useCallback, useMemo, useState } from 'react';\n\nimport { DragAndDrop } from '../drag-and-drop/drag-and-drop.component';\nimport { SimpleExpansionPanel } from '../../common/components/expansion-panel/expansion-panel.component';\n\nimport { Column } from '../drag-and-drop/dragabble-column/dragabble-column.component';\nimport { ItemDetails, ItemMap } from '../drag-and-drop/dragabble-item/dragabble-item.component';\n\nconst columnIndex = (cols: Column[], name: string) => {\n  let x = -1;\n  cols.forEach((col, i) => {\n    if (col.name === name) {\n      x = i;\n    }\n  })\n  return x;\n}\n\nconst COLUMNS = [\n  {\n    name: 'column1',\n    max: 2,\n    items: [{id: 1, expand: false}, {id: 2, expand: false}]\n  },\n  {\n    name: 'column2',\n    items: [{id: 3, expand: false}]\n  }\n];\n\n// styles for items\nfunction getItemStyle({draggingSnapshot, style}: ItemDetails) {\n  const { isDragging } = draggingSnapshot;\n  return {\n    ...style,\n    padding: 8,\n    background: isDragging? 'grey' : 'white',\n  }\n};\n\nexport const App = () => {\n  const [columns, setColumns] = useState<Column[]>(COLUMNS);\n\n  const onColumnsUpdate = useCallback(\n    (cols: Column[]) => {\n      setColumns(cols);\n    },\n    []\n  );\n\n  const handleExpand = useCallback(\n    (flag: boolean, itemDetails: ItemDetails<{expand: boolean}>) => {\n      const { column, index } = itemDetails;\n      const columnItems = [...column.items];\n      columnItems[index].expand = flag;\n      // position at which the source name exists in array\n      const sourceColumnIndex = columnIndex(columns, column.name);\n      const columnsClone = Array.from(columns);\n      columnsClone[sourceColumnIndex].items = columnItems;\n      setColumns(columnsClone)\n    },\n    [columns]\n  );\n\n  const itemsMap = useMemo(\n    () => ({\n      1: {\n        getItemStyle,\n        children: (itemDetails: ItemDetails<{expand: boolean}>) => {\n          const { item } = itemDetails;\n          return (\n            <SimpleExpansionPanel \n              title={`${item.id}`} \n              isExpanded={item.expand}\n              handleExpand={(flag: boolean) => handleExpand(flag, itemDetails)}\n            />\n          )\n        }\n      },\n      2: {\n        getItemStyle,\n        children: (itemDetails: ItemDetails<{expand: boolean}>) => {\n          const { item } = itemDetails;\n          return (\n            <SimpleExpansionPanel \n              title={`${item.id}`} \n              isExpanded={item.expand}\n              handleExpand={(flag: boolean) => handleExpand(flag, itemDetails)}\n            />\n          )\n        }\n      },\n      3: {\n        getItemStyle,\n        children: (itemDetails: ItemDetails<{expand: boolean}>) => {\n          const { item } = itemDetails;\n          return (\n            <SimpleExpansionPanel \n              title={`${item.id}`} \n              isExpanded={item.expand}\n              handleExpand={(flag: boolean) => handleExpand(flag, itemDetails)}\n            />\n          )\n        }\n      }\n    }),\n    [handleExpand]\n  )\n\n  return (\n    <DragAndDrop \n      columns={columns}\n      onColumnsUpdate={onColumnsUpdate}\n      itemsMap={itemsMap as unknown as {[key: number]: ItemMap }}\n    />\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n  \nimport { App } from './components/app/app';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}